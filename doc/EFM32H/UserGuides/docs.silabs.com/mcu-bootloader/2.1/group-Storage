<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Global site tag (gtag.js) - Google Analytics -->
   <script async src="https://www.googletagmanager.com/gtag/js?id=UA-160330710-1"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-160330710-1');
</script>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=0">
    <meta name="google" value="notranslate">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="theme-color" content="#444547">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta name="create-date" content="06/08/2022">
<meta name="content-type" content="Software API documentation">
<meta name="software-development-kits" content="32 bit MCU SDK">
<meta name="product-line" content="Microcontrollers">
<meta name="product-category" content="32-bit MCUs">
<meta name="product-family" content="Gecko">
<meta name="product-hierarchy" content="Microcontrollers,Microcontrollers|32-bit MCUs,Microcontrollers|32-bit MCUs|Gecko">
<meta name="docs-hierarchy" content="Documents,Documents|MCU Bootloader,Documents|MCU Bootloader|v2.1,Documents|MCU Bootloader|Latest">
    <title>StorageComponents - v2.1 - Gecko Bootloader API Documentation Silicon Labs</title>
    <link rel="stylesheet" href="https://docs.silabs.com/assets/styles.css">
    <script src="https://assets.adobedtm.com/0144d06d02c2/2c54aaf3cc70/launch-565181acbc03.js"></script>
  </head>
  <body>
    <nav class="navbar">
      <div class="search-bar">
        <input class='search-input' placeholder="search" />
        <input class='search-button' type='button'/>
      </div>
      <div class="menu-icon"></div>
      <div class="container">
        <a href='https://docs.silabs.com/'>docs.silabs.com</a>
      </div>
    </nav>
    <nav class="menu nocontent">
      <div class="top">
        <a href='https://silabs.com' class="logo"></a>
        <a href='https://docs.silabs.com/' class="home">docs.silabs.com</a>
        <div class="search-bar">
          <input class='search-input' placeholder="search" />
          <input class='search-button' type='button'/>
          <div class="search-site">
            <h5>Search in:</h5>
            <div class="search-site-selector"><span class="root" data-level='0'>docs</span></div>
          </div>
        </div>
      </div>
      <div class="main">
        <h3 id="gecko-bootloader-api-reference">Gecko Bootloader API Reference</h3><ul>
<li><a href="index.html">Gecko Bootloader</a></li><li><a href="modules">API Documentation</a><ul>
<li><a href="group-Interface">Application Interface</a><ul>
<li><a href="group-ParserInterface">Application Parser Interface</a><ul>
<li><a href="structBootloaderParserCallbacks-t">BootloaderParserCallbacks_t</a></li></ul>
</li><li><a href="group-ApplicationProperties">Application Properties</a><ul>
<li><a href="structApplicationData">ApplicationData</a></li><li><a href="structApplicationCertificate">ApplicationCertificate</a></li><li><a href="structApplicationProperties-t">ApplicationProperties_t</a></li></ul>
</li><li><a href="group-StorageInterface">Application Storage Interface</a><ul>
<li><a href="structBootloaderStorageSlot-t">BootloaderStorageSlot_t</a></li><li><a href="structBootloaderStorageImplementationInformation-t">BootloaderStorageImplementationInformation_t</a></li><li><a href="structBootloaderStorageInformation-t">BootloaderStorageInformation_t</a></li><li><a href="structBootloaderEraseStatus-t">BootloaderEraseStatus_t</a></li><li><a href="structBootloaderStorageFunctions">BootloaderStorageFunctions</a></li></ul>
</li><li><a href="group-CommonInterface">Common Application Interface</a><ul>
<li><a href="group-ResetInterface">Reset Information</a><ul>
<li><a href="structBootloaderResetCause-t">BootloaderResetCause_t</a></li></ul>
</li><li><a href="structBareBootTable-t">BareBootTable_t</a></li><li><a href="structBootloaderInformation-t">BootloaderInformation_t</a></li><li><a href="structBootloaderHeader-t">BootloaderHeader_t</a></li><li><a href="structFirstBootloaderTable-t">FirstBootloaderTable_t</a></li><li><a href="structMainBootloaderTable-t">MainBootloaderTable_t</a></li></ul>
</li></ul>
</li><li><a href="group-Core">Bootloader Core</a><ul>
<li><a href="group-Bootload">Bootload</a></li><li><a href="group-Flash">Flash</a></li><li><a href="group-Reset">Reset</a></li><li><a href="group-TrustZone">TrustZone</a></li><li><a href="group-Upgrade">Upgrade</a></li></ul>
</li><li><a href="group-Components">Components</a><ul>
<li><a href="group-Communication">Communication</a><ul>
<li><a href="group-CommunicationUtils">Utils</a><ul>
<li><a href="group-Xmodem">XMODEM Parser</a><ul>
<li><a href="group-Commands">Commands</a></li><li><a href="structXmodemPacket-t">XmodemPacket_t</a></li></ul>
</li></ul>
</li></ul>
</li><li><a href="group-Debug">Debug</a></li><li><a href="group-Decompressor">Decompressor</a><ul>
<li><a href="group-Lz4Decompressor">LZ4 Decompressor</a><ul>
<li><a href="structLz4Context-t">Lz4Context_t</a></li></ul>
</li></ul>
</li><li><a href="group-GpioActivation">GPIO Activation</a><ul>
<li><a href="group-ButtonGPIO">Button GPIO</a></li><li><a href="group-EZSPGPIO">EZSP GPIO</a></li></ul>
</li><li><a href="group-ImageParser">Image Parser</a><ul>
<li><a href="group-GblParser">GBL Parser</a><ul>
<li><a href="group-CustomTags">Custom GBL Tags</a><ul>
<li><a href="group-Lz4ProgTag">LZ4 Programming Tag</a><ul>
<li><a href="structLz4ParserContext-t">Lz4ParserContext_t</a></li></ul>
</li><li><a href="group-LzmaProgTag">LZMA Programming Tag</a></li><li><a href="structGblCustomTag-t">GblCustomTag_t</a></li></ul>
</li><li><a href="group-GblParserFormat">GBL Format</a><ul>
<li><a href="structGblTagHeader-t">GblTagHeader_t</a></li><li><a href="structGblHeader-t">GblHeader_t</a></li><li><a href="structVersionDependency-t">VersionDependency_t</a></li><li><a href="structGblApplication-t">GblApplication_t</a></li><li><a href="structGblBootloader-t">GblBootloader_t</a></li><li><a href="structGblSeUpgrade-t">GblSeUpgrade_t</a></li><li><a href="structGblMetadata-t">GblMetadata_t</a></li><li><a href="structGblProg-t">GblProg_t</a></li><li><a href="structGblEnd-t">GblEnd_t</a></li><li><a href="structGblEncryptionInitAesCcm-t">GblEncryptionInitAesCcm_t</a></li><li><a href="structGblEncryptionData-t">GblEncryptionData_t</a></li><li><a href="structGblCertificateEcdsaP256-t">GblCertificateEcdsaP256_t</a></li><li><a href="structGblSignatureEcdsaP256-t">GblSignatureEcdsaP256_t</a></li></ul>
</li><li><a href="structImageProperties-t">ImageProperties_t</a></li><li><a href="structParserContext-t">ParserContext_t</a></li><li><a href="structGblInputBuffer-t">GblInputBuffer_t</a></li></ul>
</li></ul>
</li><li><a href="group-Security">Security</a><ul>
<li><a href="group-AES">AES</a><ul>
<li><a href="structAesContext">AesContext</a></li><li><a href="structAesCtrContext">AesCtrContext</a></li></ul>
</li><li><a href="group-CRC16">CRC16</a></li><li><a href="group-CRC32">CRC32</a></li><li><a href="group-Decryption">Decryption</a><ul>
<li><a href="unionDecryptContext-t">DecryptContext_t</a></li><li><a href="unionAuthContext-t">AuthContext_t</a></li></ul>
</li><li><a href="group-ECDSA">ECDSA</a><ul>
<li><a href="group-ECC">ECC Library</a><ul>
<li><a href="structECC-Point-t">ECC_Point_t</a></li><li><a href="structECC-EcdsaSignature-t">ECC_EcdsaSignature_t</a></li></ul>
</li></ul>
</li><li><a href="group-SHA256">SHA256</a><ul>
<li><a href="structbtl-sha256-context">btl_sha256_context</a></li></ul>
</li><li><a href="group-SHA-256">SHA_256</a><ul>
<li><a href="unionSha256Context">Sha256Context</a></li></ul>
</li><li><a href="group-Tokens">Tokens</a></li></ul>
</li><li><a href="group-Storage">Storage</a><ul>
<li><a href="group-BootloadInfo">Bootload Info</a><ul>
<li><a href="structBootloadInfo-t">BootloadInfo_t</a></li></ul>
</li><li><a href="group-SpiflashConfigs">SPI Flash Configurations</a></li><li><a href="group-SpiflashConfigsSfdp">SPI Flash Configurations using SFDP</a></li><li><a href="structBootloaderStorageLayout-t">BootloaderStorageLayout_t</a></li></ul>
</li></ul>
</li><li><a href="group-Driver">Driver</a><ul>
<li><a href="group-Delay">Delay</a></li><li><a href="group-Spi">SPI</a></li><li><a href="group-Spi-peripheral">SPI Peripheral</a></li><li><a href="group-UART">UART</a></li></ul>
</li><li><a href="group-ErrorCodes">Error Codes</a><ul>
<li><a href="group-BootloadError">Bootloading Error Codes</a></li><li><a href="group-CommunicationError">Communication Component Error Codes</a></li><li><a href="group-CompressionError">Compression Error Codes</a></li><li><a href="group-ErrorBases">Error Code Base Values</a></li><li><a href="group-ParserError">Image Parser Error Codes</a></li><li><a href="group-InitError">Initialization Error Codes</a></li><li><a href="group-ParseErrpr">Parse Error Codes</a></li><li><a href="group-SpiPeripheralError">SPI Peripheral Driver Error Codes</a></li><li><a href="group-SecurityError">Security Error Codes</a></li><li><a href="group-StorageError">Storage Driver Error Codes</a></li><li><a href="group-UartError">UART Driver Error Codes</a></li><li><a href="group-XmodemError">XMODEM Error Codes</a></li></ul>
</li></ul>
</li><li><a href="_version_history">Version History</a></li></ul>
<h3 id="more-documentation"><a href="https://www.silabs.com/support/resources.ct-application-notes?query=%22gecko%20bootloader%22">More Documentation</a></h3>
      </div>
      <div id="split-bar"></div>
    </nav>
    <div class="overlay"></div>
    <main class="content">
      <article>
        <p class="banner">You are viewing documentation for version: <em>2.1</em> | <a href="https://docs.silabs.com/mcu-bootloader/latest/version-history">Version History</a></p><div class="header">
  
  <div class="headertitle">
  <h1 class="title">StorageComponents</h1></div>
</div><!--header-->
<div class="contents">
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<p>Storage component. </p>
<p>This component provides the bootloader with multiple storage options. All storage implementations have to provide a slot-based API to access image files to be bootloaded.</p>
<p>Some storage implementations also support a raw storage API to access the underlying storage medium. This can be used by applications to store other data in parts of the storage medium that are not used for bootloading.</p>
<h1><a class="anchor" id="storage-implementations"></a>
Storage Implementations</h1>


<h3><a class="anchor" id="storage-internal"></a>Internal Flash</h3><div class="textblock">The Internal Flash storage implementation utilizes the internal Flash of the device for upgrade image storage. </div>

<h3><a class="anchor" id="storage-spiflash"></a>SPI Flash</h3><div class="textblock">The SPI Flash storage implementation supports a variety of SPI Flash parts including the following:<p></p><ul>
<li>Spansion S25FL208K (8Mbit)</li>
<li>Winbond W25X20BV (2Mbit), W25Q80BV (8Mbit)</li>
<li>Macronix MX25L2006E (2Mbit), MX25L4006E (4Mbit), MX25L8006E (8Mbit), MX25R8035F (8Mbit low power), MX25L1606E (16Mbit), MX25U1635E (16Mbit 2Volt), MX25R3235F (32Mbit ultra low power) MX25R6435F (64Mbit low power)</li>
<li>Atmel/Adesto AT25DF041A (4Mbit), AT25DF081A (8Mbit)</li>
<li>Numonyx/Micron M25P20 (2Mbit), M25P40 (4Mbit), M25P80 (8Mbit), M25P16 (16Mbit)</li>
<li>ISSI IS25LQ025B (256Kbit), IS25LQ512B (512Kbit), IS25LQ010B (1Mbit), IS25LQ020B (2Mbit), IS25LQ040B (4Mbit)</li>
</ul>
The subset of supported devices can be configured at compile time using the configuration defines given in <a href="group-SpiflashConfigs" class="el" >SPI Flash Configurations</a>. Including support for multiple devices requires more Flash space in the bootloader.The SPI Flash storage implementation does not support any write protection functionality. </div><table class="memberdecls">
<tbody><tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem"><td class="memItemRight" valign="bottom"><a href="group-BootloadInfo" class="" >Bootload Info</a></td></tr>
<tr class="memdesc"><td class="mdescRight">Indicates which firmware update image should be bootloaded next. <br></td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemRight" valign="bottom"><a href="group-SpiflashConfigs" class="" >SPI Flash Configurations</a></td></tr>
<tr class="memdesc"><td class="mdescRight">Configuration parameters for SPI flashes. <br></td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemRight" valign="bottom"><a href="group-SpiflashConfigsSfdp" class="" >SPI Flash Configurations using SFDP</a></td></tr>
<tr class="memdesc"><td class="mdescRight">Configuration parameters for SPI flashes Using JEDEC SFDP Standard. <br></td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
</tbody></table><table class="memberdecls">
<tbody><tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a href="structBootloaderStorageLayout-t" class="el" >BootloaderStorageLayout_t</a></td></tr>
<tr class="memdesc"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Information about the storage backend.  <br></td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
</tbody></table><table class="memberdecls">
<tbody><tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3540907ab5361c14267dc03a3bd39e61"></a>
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga3540907ab5361c14267dc03a3bd39e61" class="el" >BOOTLOADER_STORAGE_FUNCTIONS_VERSION</a>&nbsp;&nbsp;&nbsp;0x00000100</td></tr>
<tr class="memdesc"><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Version number for bootloader storage functions struct. <br></td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
</tbody></table><table class="memberdecls">
<tbody><tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga94a4426978ff3f09c117f90d2276d3d2" class="el" >storage_init</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga8565ac7a46fcac65d1eaf0678eef7ad0" class="el" >storage_main</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gab819eceb2cd475bf69fbd9f0ccea8119" class="el" >storage_shutdown</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga3064ede663216fc3f7fa747475c90d66" class="el" >storage_getInfo</a> (<a href="structBootloaderStorageInformation-t" class="el" >BootloaderStorageInformation_t</a> *info)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga1802df1bf013527657b1d6abc565187d" class="el" >storage_getSlotInfo</a> (uint32_t slotId, <a href="structBootloaderStorageSlot-t" class="el" >BootloaderStorageSlot_t</a> *slot)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gab794edddf8c17b2a9a43761c7f0f9ef8" class="el" >storage_getSlotMetadata</a> (<a href="group-ParserInterface#ga510a9c97d39ff194124c9f7f9c49edd9" class="el" >BootloaderParserContext_t</a> *context, <a href="group-ApplicationProperties#ga1443b85815ddfba3617ce100647e5461" class="el" >ApplicationData_t</a> *appInfo, uint32_t *bootloaderVersion)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga6846bd2d7467b6be99d9a8b88db42ec5" class="el" >storage_initParseSlot</a> (uint32_t slotId, <a href="group-ParserInterface#ga510a9c97d39ff194124c9f7f9c49edd9" class="el" >BootloaderParserContext_t</a> *context, size_t contextSize)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gab11bfcb67ccc6b92b50ebada8d0bb898" class="el" >storage_verifySlot</a> (<a href="group-ParserInterface#ga510a9c97d39ff194124c9f7f9c49edd9" class="el" >BootloaderParserContext_t</a> *context, <a href="group-ParserInterface#gab0f1ad6d1628b642d6574e191a60df2c" class="el" >BootloaderParserCallback_t</a> metadataCallback)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga8587fd963913d10df34a29923a2fcbaa" class="el" >storage_upgradeSeFromSlot</a> (uint32_t slotId)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga089f59d07cfd0e39f5ec63a0ec0b4b13" class="el" >storage_bootloadBootloaderFromSlot</a> (uint32_t slotId, uint32_t version)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gade37e2657be85459b4637c16485ba2ab" class="el" >storage_bootloadApplicationFromSlot</a> (uint32_t slotId, uint32_t version)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga9610199da9571e0ef1f908550f51502c" class="el" >storage_eraseSlot</a> (uint32_t slotId)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gae44bd40cd9a391e4217c283d06ed2f45" class="el" >storage_readSlot</a> (uint32_t slotId, uint32_t offset, uint8_t *buffer, size_t numBytes)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gaf967ddc04a9c50c264a48095418c5d91" class="el" >storage_writeSlot</a> (uint32_t slotId, uint32_t offset, uint8_t *data, size_t numBytes)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga015ad4df1bc5dab66beac5ff9f0185e4" class="el" >storage_readRaw</a> (uint32_t address, uint8_t *buffer, size_t numBytes)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gafc13b13324ec97d3c82127aeac0b1478" class="el" >storage_writeRaw</a> (uint32_t address, uint8_t *data, size_t numBytes)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gacbad6157ba49c274c476f2e06710a97d" class="el" >storage_getDMAchannel</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga1db0fbd4a50f417f0cf87309ed45b706" class="el" >storage_eraseRaw</a> (uint32_t address, size_t length)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#gaae59d446077156e9e90e1ca271f3ec2a" class="el" >storage_isBusy</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">uint32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Storage#ga2604e942cdc1c27cdefc9b98fe45f266" class="el" >storage_getSpiUsartPPUSATD</a> (uint32_t *ppusatdNr)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
</tbody></table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga94a4426978ff3f09c117f90d2276d3d2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_init </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize the storage component.</p>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tbody><tr><td class="paramname"><code>BOOTLOADER_OK</code></td><td>on success </td></tr>
    <tr><td class="paramname"><code>BOOTLOADER_ERROR_INIT_STORAGE</code></td><td>on failure </td></tr>
  </tbody></table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8565ac7a46fcac65d1eaf0678eef7ad0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_main </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Main function for storage component.</p>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code </dd></dl>

</div>
</div>
<a class="anchor" id="gab819eceb2cd475bf69fbd9f0ccea8119"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_shutdown </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Shutdown storage component.</p>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tbody><tr><td class="paramname"><code>BOOTLOADER_OK</code></td><td>on success </td></tr>
    <tr><td class="paramname"><code>BOOTLOADER_ERROR_INIT_STORAGE</code></td><td>on failure </td></tr>
  </tbody></table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3064ede663216fc3f7fa747475c90d66"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">void storage_getInfo </td>
          <td>(</td>
          <td class="paramtype"><a href="structBootloaderStorageInformation-t" class="el" >BootloaderStorageInformation_t</a> *&nbsp;</td>
          <td class="paramname"><code>info</code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Get information about the storage component running on the device.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramdir">[out]</td><td class="paramname"><code>info</code></td><td>Pointer to <a href="structBootloaderStorageInformation-t" class="el" >BootloaderStorageInformation_t</a> struct </td></tr>
  </tbody></table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1802df1bf013527657b1d6abc565187d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_getSlotInfo </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>slotId, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="structBootloaderStorageSlot-t" class="el" >BootloaderStorageSlot_t</a> *&nbsp;</td>
          <td class="paramname"><code>slot&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Get information about the layout of a storage slot</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramdir">[in]</td><td class="paramname"><code>slotId</code></td><td>Slot ID to get info about </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname"><code>slot</code></td><td>Pointer to <a href="structBootloaderStorageSlot-t" class="el" >BootloaderStorageSlot_t</a> struct</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code in <a href="group-ErrorBases#ga6e7d9953864f32fd1a1121ffd6f1f86e" class="el" >BOOTLOADER_ERROR_STORAGE_BASE</a> range </dd></dl>

</div>
</div>
<a class="anchor" id="gab794edddf8c17b2a9a43761c7f0f9ef8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_getSlotMetadata </td>
          <td>(</td>
          <td class="paramtype"><a href="group-ParserInterface#ga510a9c97d39ff194124c9f7f9c49edd9" class="el" >BootloaderParserContext_t</a> *&nbsp;</td>
          <td class="paramname"><code>context, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="group-ApplicationProperties#ga1443b85815ddfba3617ce100647e5461" class="el" >ApplicationData_t</a> *&nbsp;</td>
          <td class="paramname"><code>appInfo, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&nbsp;</td>
          <td class="paramname"><code>bootloaderVersion&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Get information about the contents of a storage slot</p>
<dl class="section note"><dt>Note</dt><dd><a href="group-Storage#ga6846bd2d7467b6be99d9a8b88db42ec5" class="el" >storage_initParseSlot</a> <b>must</b> be called before calling this function to initialize the context.</dd>
<dd>
If the slot does not contain an application or a bootloader, the the corresponding values are set to zero.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramdir">[in]</td><td class="paramname"><code>context</code></td><td>Parsing context. Should be allocated by the application and initialized by calling storage_initParseSlot before calling this function. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname"><code>appInfo</code></td><td>Pointer to <a href="group-ApplicationProperties#ga1443b85815ddfba3617ce100647e5461" class="el" >ApplicationData_t</a> struct </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname"><code>bootloaderVersion</code></td><td>Pointer to an unsigned integer representing the bootloader version number.</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success </dd></dl>

</div>
</div>
<a class="anchor" id="ga6846bd2d7467b6be99d9a8b88db42ec5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_initParseSlot </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>slotId, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="group-ParserInterface#ga510a9c97d39ff194124c9f7f9c49edd9" class="el" >BootloaderParserContext_t</a> *&nbsp;</td>
          <td class="paramname"><code>context, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"><code>contextSize&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize the context variable for checking a slot and trying to parse the image contained in it.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramdir">[in]</td><td class="paramname"><code>slotId</code></td><td>Slot to check for valid image </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname"><code>context</code></td><td>Pointer to BootloaderParserContext_t struct </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname"><code>contextSize</code></td><td>Length of the context struct</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code in <a href="group-ErrorBases#gaf47a049b265ebc114b96e7708f95bde3" class="el" >BOOTLOADER_ERROR_PARSE_BASE</a> range </dd></dl>

</div>
</div>
<a class="anchor" id="gab11bfcb67ccc6b92b50ebada8d0bb898"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_verifySlot </td>
          <td>(</td>
          <td class="paramtype"><a href="group-ParserInterface#ga510a9c97d39ff194124c9f7f9c49edd9" class="el" >BootloaderParserContext_t</a> *&nbsp;</td>
          <td class="paramname"><code>context, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="group-ParserInterface#gab0f1ad6d1628b642d6574e191a60df2c" class="el" >BootloaderParserCallback_t</a>&nbsp;</td>
          <td class="paramname"><code>metadataCallback&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Check the given slot for a valid image. Call this function continuously until it stops returning. <a href="group-ParseErrpr#gab13b4da5c5b50b81cbd699c61b2efab7" class="el" >BOOTLOADER_ERROR_PARSE_CONTINUE</a>.</p>
<p>The function returns <a href="group-ParseErrpr#ga22675de53139d1378f7be438a06c66d4" class="el" >BOOTLOADER_ERROR_PARSE_SUCCESS</a> if the image in the slot was successfully verified. For detailed information on the parsed image, see imageProperties in the context variable.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramdir">[in]</td><td class="paramname"><code>context</code></td><td>Pointer to BootloaderImageParsingContext_t struct </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname"><code>metadataCallback</code></td><td>Functionpointer which will be called with any binary metadata that might be contained within the image.</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ParseErrpr#gab13b4da5c5b50b81cbd699c61b2efab7" class="el" >BOOTLOADER_ERROR_PARSE_CONTINUE</a> if the parsing is not complete, <a href="group-ParseErrpr#ga22675de53139d1378f7be438a06c66d4" class="el" >BOOTLOADER_ERROR_PARSE_SUCCESS</a> on success. </dd></dl>

</div>
</div>
<a class="anchor" id="ga8587fd963913d10df34a29923a2fcbaa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">bool storage_upgradeSeFromSlot </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>slotId</code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Upgrade SE using image contained in a slot.</p>
<dl class="section note"><dt>Note</dt><dd>This function assumes the image located in the slotId has been verified first.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>slotId</code></td><td>Slot ID to bootload from</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the operation succeeded </dd></dl>

</div>
</div>
<a class="anchor" id="ga089f59d07cfd0e39f5ec63a0ec0b4b13"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">bool storage_bootloadBootloaderFromSlot </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>slotId, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>version&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Bootload a bootloader image contained in a slot</p>
<dl class="section note"><dt>Note</dt><dd>This function assumes the image located in the slotId has been verified first.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>slotId</code></td><td>Slot ID to bootload from </td></tr>
    <tr><td class="paramname"><code>version</code></td><td>Version number of new bootloader</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if operation succeeded </dd></dl>

</div>
</div>
<a class="anchor" id="gade37e2657be85459b4637c16485ba2ab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">bool storage_bootloadApplicationFromSlot </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>slotId, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>version&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Bootload an image contained in a slot.</p>
<dl class="section note"><dt>Note</dt><dd>This function assumes the image located in slotId has been verified first.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>slotId</code></td><td>Slot ID to bootload from </td></tr>
    <tr><td class="paramname"><code>version</code></td><td>Cached version number of the image contained in the slot (used for downgrade prevention)</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the operation succeeded </dd></dl>

</div>
</div>
<a class="anchor" id="ga9610199da9571e0ef1f908550f51502c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_eraseSlot </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>slotId</code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Erase the contents of a storage slot including all data and metadata.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>slotId</code></td><td>ID of the slot.</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code in <a href="group-ErrorBases#ga6e7d9953864f32fd1a1121ffd6f1f86e" class="el" >BOOTLOADER_ERROR_STORAGE_BASE</a> range </dd></dl>

</div>
</div>
<a class="anchor" id="gae44bd40cd9a391e4217c283d06ed2f45"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_readSlot </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>slotId, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>offset, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"><code>buffer, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"><code>numBytes&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Read a number of words from a storage slot.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>slotId</code></td><td>ID of the slot. </td></tr>
    <tr><td class="paramname"><code>offset</code></td><td>The offset into the slot in bytes. </td></tr>
    <tr><td class="paramname"><code>buffer</code></td><td>Pointer to buffer to store read data in. </td></tr>
    <tr><td class="paramname"><code>numBytes</code></td><td>Number of bytes to read.</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code in <a href="group-ErrorBases#ga6e7d9953864f32fd1a1121ffd6f1f86e" class="el" >BOOTLOADER_ERROR_STORAGE_BASE</a> range </dd></dl>

</div>
</div>
<a class="anchor" id="gaf967ddc04a9c50c264a48095418c5d91"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_writeSlot </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>slotId, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>offset, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"><code>data, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"><code>numBytes&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Write a number of words to a storage slot.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>slotId</code></td><td>ID of the slot. </td></tr>
    <tr><td class="paramname"><code>offset</code></td><td>The offset into the slot in bytes. </td></tr>
    <tr><td class="paramname"><code>data</code></td><td>Pointer to data to write. </td></tr>
    <tr><td class="paramname"><code>numBytes</code></td><td>Length of data to write. Must be a multiple of 4.</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code in <a href="group-ErrorBases#ga6e7d9953864f32fd1a1121ffd6f1f86e" class="el" >BOOTLOADER_ERROR_STORAGE_BASE</a> range </dd></dl>

</div>
</div>
<a class="anchor" id="ga015ad4df1bc5dab66beac5ff9f0185e4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_readRaw </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>address, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"><code>buffer, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"><code>numBytes&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Read number of words from raw storage.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>address</code></td><td>The raw address of the storage. </td></tr>
    <tr><td class="paramname"><code>buffer</code></td><td>Pointer to the buffer to store read data in. </td></tr>
    <tr><td class="paramname"><code>numBytes</code></td><td>Number of bytes to read.</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code in <a href="group-ErrorBases#ga6e7d9953864f32fd1a1121ffd6f1f86e" class="el" >BOOTLOADER_ERROR_STORAGE_BASE</a> range </dd></dl>

</div>
</div>
<a class="anchor" id="gafc13b13324ec97d3c82127aeac0b1478"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_writeRaw </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>address, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"><code>data, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"><code>numBytes&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Write a number of words to raw storage.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>address</code></td><td>The raw address of the storage. </td></tr>
    <tr><td class="paramname"><code>data</code></td><td>Pointer to data to write. </td></tr>
    <tr><td class="paramname"><code>numBytes</code></td><td>Length of data to write. Must be a multiple of 4.</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code in <a href="group-ErrorBases#ga6e7d9953864f32fd1a1121ffd6f1f86e" class="el" >BOOTLOADER_ERROR_STORAGE_BASE</a> range </dd></dl>

</div>
</div>
<a class="anchor" id="gacbad6157ba49c274c476f2e06710a97d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_getDMAchannel </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Get allocated DMA channel for MSC write</p>
<dl class="section return"><dt>Returns</dt><dd>A positive number channel. -1 if DMA-based MSC write is not enabled. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1db0fbd4a50f417f0cf87309ed45b706"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t storage_eraseRaw </td>
          <td>(</td>
          <td class="paramtype">uint32_t&nbsp;</td>
          <td class="paramname"><code>address, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"><code>length&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Erase the raw storage.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>address</code></td><td>Start address of the region to erase </td></tr>
    <tr><td class="paramname"><code>length</code></td><td>Number of bytes to erase</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Some devices, such as Flash-based storages, have restrictions on the alignment and size of erased regions. The details of the limitations of a particular storage can be found by reading the <a href="structBootloaderStorageInformation-t" class="el" >BootloaderStorageInformation_t</a> struct using <a href="group-Storage#ga3064ede663216fc3f7fa747475c90d66" class="el" >storage_getInfo</a>.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd><a href="group-ErrorCodes#gaf5e631186d857be458f4bdb824db1884" class="el" >BOOTLOADER_OK</a> on success, else error code in <a href="group-ErrorBases#ga6e7d9953864f32fd1a1121ffd6f1f86e" class="el" >BOOTLOADER_ERROR_STORAGE_BASE</a> range </dd></dl>

</div>
</div>
<a class="anchor" id="gaae59d446077156e9e90e1ca271f3ec2a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">bool storage_isBusy </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Poll the storage implementation and check whether it is busy.</p>
<dl class="section return"><dt>Returns</dt><dd>True if the storage is busy </dd></dl>

</div>
</div>
<a class="anchor" id="ga2604e942cdc1c27cdefc9b98fe45f266"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">uint32_t storage_getSpiUsartPPUSATD </td>
          <td>(</td>
          <td class="paramtype">uint32_t *&nbsp;</td>
          <td class="paramname"><code>ppusatdNr</code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Get PPUSATD word of the (E)USART in use</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>ppusatdNr</code></td><td>PPUSATD register number</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Word representing the PPUSATD bit field of the (E)USART in use. 0 if not found. </dd></dl>

</div>
</div>
</div>
      </article>
    </main>
    <script type="text/javascript" src="https://docs.silabs.com/assets/script.js"></script>
    <script type='text/javascript'>
      var tldr = '/mcu-bootloader/2.1/';
      var _map = '';
    </script>
        <script type="text/javascript">
       try {
        _satellite.pageBottom();
       } catch(err) {
        console.log("Adobe DTM (Analytics) _satellite has not been loaded. Is there any chance you're using an AdBlocker?");
       }
    </script>
  </body>
</html>
