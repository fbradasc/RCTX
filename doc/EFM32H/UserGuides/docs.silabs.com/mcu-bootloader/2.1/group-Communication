<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Global site tag (gtag.js) - Google Analytics -->
   <script async src="https://www.googletagmanager.com/gtag/js?id=UA-160330710-1"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-160330710-1');
</script>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=0">
    <meta name="google" value="notranslate">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="theme-color" content="#444547">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta name="create-date" content="06/08/2022">
<meta name="content-type" content="Software API documentation">
<meta name="software-development-kits" content="32 bit MCU SDK">
<meta name="product-line" content="Microcontrollers">
<meta name="product-category" content="32-bit MCUs">
<meta name="product-family" content="Gecko">
<meta name="product-hierarchy" content="Microcontrollers,Microcontrollers|32-bit MCUs,Microcontrollers|32-bit MCUs|Gecko">
<meta name="docs-hierarchy" content="Documents,Documents|MCU Bootloader,Documents|MCU Bootloader|v2.1,Documents|MCU Bootloader|Latest">
    <title>CommunicationComponents - v2.1 - Gecko Bootloader API Documentation Silicon Labs</title>
    <link rel="stylesheet" href="https://docs.silabs.com/assets/styles.css">
    <script src="https://assets.adobedtm.com/0144d06d02c2/2c54aaf3cc70/launch-565181acbc03.js"></script>
  </head>
  <body>
    <nav class="navbar">
      <div class="search-bar">
        <input class='search-input' placeholder="search" />
        <input class='search-button' type='button'/>
      </div>
      <div class="menu-icon"></div>
      <div class="container">
        <a href='https://docs.silabs.com/'>docs.silabs.com</a>
      </div>
    </nav>
    <nav class="menu nocontent">
      <div class="top">
        <a href='https://silabs.com' class="logo"></a>
        <a href='https://docs.silabs.com/' class="home">docs.silabs.com</a>
        <div class="search-bar">
          <input class='search-input' placeholder="search" />
          <input class='search-button' type='button'/>
          <div class="search-site">
            <h5>Search in:</h5>
            <div class="search-site-selector"><span class="root" data-level='0'>docs</span></div>
          </div>
        </div>
      </div>
      <div class="main">
        <h3 id="gecko-bootloader-api-reference">Gecko Bootloader API Reference</h3><ul>
<li><a href="index.html">Gecko Bootloader</a></li><li><a href="modules">API Documentation</a><ul>
<li><a href="group-Interface">Application Interface</a><ul>
<li><a href="group-ParserInterface">Application Parser Interface</a><ul>
<li><a href="structBootloaderParserCallbacks-t">BootloaderParserCallbacks_t</a></li></ul>
</li><li><a href="group-ApplicationProperties">Application Properties</a><ul>
<li><a href="structApplicationData">ApplicationData</a></li><li><a href="structApplicationCertificate">ApplicationCertificate</a></li><li><a href="structApplicationProperties-t">ApplicationProperties_t</a></li></ul>
</li><li><a href="group-StorageInterface">Application Storage Interface</a><ul>
<li><a href="structBootloaderStorageSlot-t">BootloaderStorageSlot_t</a></li><li><a href="structBootloaderStorageImplementationInformation-t">BootloaderStorageImplementationInformation_t</a></li><li><a href="structBootloaderStorageInformation-t">BootloaderStorageInformation_t</a></li><li><a href="structBootloaderEraseStatus-t">BootloaderEraseStatus_t</a></li><li><a href="structBootloaderStorageFunctions">BootloaderStorageFunctions</a></li></ul>
</li><li><a href="group-CommonInterface">Common Application Interface</a><ul>
<li><a href="group-ResetInterface">Reset Information</a><ul>
<li><a href="structBootloaderResetCause-t">BootloaderResetCause_t</a></li></ul>
</li><li><a href="structBareBootTable-t">BareBootTable_t</a></li><li><a href="structBootloaderInformation-t">BootloaderInformation_t</a></li><li><a href="structBootloaderHeader-t">BootloaderHeader_t</a></li><li><a href="structFirstBootloaderTable-t">FirstBootloaderTable_t</a></li><li><a href="structMainBootloaderTable-t">MainBootloaderTable_t</a></li></ul>
</li></ul>
</li><li><a href="group-Core">Bootloader Core</a><ul>
<li><a href="group-Bootload">Bootload</a></li><li><a href="group-Flash">Flash</a></li><li><a href="group-Reset">Reset</a></li><li><a href="group-TrustZone">TrustZone</a></li><li><a href="group-Upgrade">Upgrade</a></li></ul>
</li><li><a href="group-Components">Components</a><ul>
<li><a href="group-Communication">Communication</a><ul>
<li><a href="group-CommunicationUtils">Utils</a><ul>
<li><a href="group-Xmodem">XMODEM Parser</a><ul>
<li><a href="group-Commands">Commands</a></li><li><a href="structXmodemPacket-t">XmodemPacket_t</a></li></ul>
</li></ul>
</li></ul>
</li><li><a href="group-Debug">Debug</a></li><li><a href="group-Decompressor">Decompressor</a><ul>
<li><a href="group-Lz4Decompressor">LZ4 Decompressor</a><ul>
<li><a href="structLz4Context-t">Lz4Context_t</a></li></ul>
</li></ul>
</li><li><a href="group-GpioActivation">GPIO Activation</a><ul>
<li><a href="group-ButtonGPIO">Button GPIO</a></li><li><a href="group-EZSPGPIO">EZSP GPIO</a></li></ul>
</li><li><a href="group-ImageParser">Image Parser</a><ul>
<li><a href="group-GblParser">GBL Parser</a><ul>
<li><a href="group-CustomTags">Custom GBL Tags</a><ul>
<li><a href="group-Lz4ProgTag">LZ4 Programming Tag</a><ul>
<li><a href="structLz4ParserContext-t">Lz4ParserContext_t</a></li></ul>
</li><li><a href="group-LzmaProgTag">LZMA Programming Tag</a></li><li><a href="structGblCustomTag-t">GblCustomTag_t</a></li></ul>
</li><li><a href="group-GblParserFormat">GBL Format</a><ul>
<li><a href="structGblTagHeader-t">GblTagHeader_t</a></li><li><a href="structGblHeader-t">GblHeader_t</a></li><li><a href="structVersionDependency-t">VersionDependency_t</a></li><li><a href="structGblApplication-t">GblApplication_t</a></li><li><a href="structGblBootloader-t">GblBootloader_t</a></li><li><a href="structGblSeUpgrade-t">GblSeUpgrade_t</a></li><li><a href="structGblMetadata-t">GblMetadata_t</a></li><li><a href="structGblProg-t">GblProg_t</a></li><li><a href="structGblEnd-t">GblEnd_t</a></li><li><a href="structGblEncryptionInitAesCcm-t">GblEncryptionInitAesCcm_t</a></li><li><a href="structGblEncryptionData-t">GblEncryptionData_t</a></li><li><a href="structGblCertificateEcdsaP256-t">GblCertificateEcdsaP256_t</a></li><li><a href="structGblSignatureEcdsaP256-t">GblSignatureEcdsaP256_t</a></li></ul>
</li><li><a href="structImageProperties-t">ImageProperties_t</a></li><li><a href="structParserContext-t">ParserContext_t</a></li><li><a href="structGblInputBuffer-t">GblInputBuffer_t</a></li></ul>
</li></ul>
</li><li><a href="group-Security">Security</a><ul>
<li><a href="group-AES">AES</a><ul>
<li><a href="structAesContext">AesContext</a></li><li><a href="structAesCtrContext">AesCtrContext</a></li></ul>
</li><li><a href="group-CRC16">CRC16</a></li><li><a href="group-CRC32">CRC32</a></li><li><a href="group-Decryption">Decryption</a><ul>
<li><a href="unionDecryptContext-t">DecryptContext_t</a></li><li><a href="unionAuthContext-t">AuthContext_t</a></li></ul>
</li><li><a href="group-ECDSA">ECDSA</a><ul>
<li><a href="group-ECC">ECC Library</a><ul>
<li><a href="structECC-Point-t">ECC_Point_t</a></li><li><a href="structECC-EcdsaSignature-t">ECC_EcdsaSignature_t</a></li></ul>
</li></ul>
</li><li><a href="group-SHA256">SHA256</a><ul>
<li><a href="structbtl-sha256-context">btl_sha256_context</a></li></ul>
</li><li><a href="group-SHA-256">SHA_256</a><ul>
<li><a href="unionSha256Context">Sha256Context</a></li></ul>
</li><li><a href="group-Tokens">Tokens</a></li></ul>
</li><li><a href="group-Storage">Storage</a><ul>
<li><a href="group-BootloadInfo">Bootload Info</a><ul>
<li><a href="structBootloadInfo-t">BootloadInfo_t</a></li></ul>
</li><li><a href="group-SpiflashConfigs">SPI Flash Configurations</a></li><li><a href="group-SpiflashConfigsSfdp">SPI Flash Configurations using SFDP</a></li><li><a href="structBootloaderStorageLayout-t">BootloaderStorageLayout_t</a></li></ul>
</li></ul>
</li><li><a href="group-Driver">Driver</a><ul>
<li><a href="group-Delay">Delay</a></li><li><a href="group-Spi">SPI</a></li><li><a href="group-Spi-peripheral">SPI Peripheral</a></li><li><a href="group-UART">UART</a></li></ul>
</li><li><a href="group-ErrorCodes">Error Codes</a><ul>
<li><a href="group-BootloadError">Bootloading Error Codes</a></li><li><a href="group-CommunicationError">Communication Component Error Codes</a></li><li><a href="group-CompressionError">Compression Error Codes</a></li><li><a href="group-ErrorBases">Error Code Base Values</a></li><li><a href="group-ParserError">Image Parser Error Codes</a></li><li><a href="group-InitError">Initialization Error Codes</a></li><li><a href="group-ParseErrpr">Parse Error Codes</a></li><li><a href="group-SpiPeripheralError">SPI Peripheral Driver Error Codes</a></li><li><a href="group-SecurityError">Security Error Codes</a></li><li><a href="group-StorageError">Storage Driver Error Codes</a></li><li><a href="group-UartError">UART Driver Error Codes</a></li><li><a href="group-XmodemError">XMODEM Error Codes</a></li></ul>
</li></ul>
</li><li><a href="_version_history">Version History</a></li></ul>
<h3 id="more-documentation"><a href="https://www.silabs.com/support/resources.ct-application-notes?query=%22gecko%20bootloader%22">More Documentation</a></h3>
      </div>
      <div id="split-bar"></div>
    </nav>
    <div class="overlay"></div>
    <main class="content">
      <article>
        <p class="banner">You are viewing documentation for version: <em>2.1</em> | <a href="https://docs.silabs.com/mcu-bootloader/latest/version-history">Version History</a></p><div class="header">
  
  <div class="headertitle">
  <h1 class="title">CommunicationComponents</h1></div>
</div><!--header-->
<div class="contents">
<a name="details" id="details"></a><h2 class="groupheader">Description</h2>
<p>Host communication interface. </p>
<p>The Communication component provides an interface for implementing communication with a host device, such as a computer or a microcontroller. </p>
<h1><a class="anchor" id="communication-impl"></a>
Communication Protocol Implementations</h1>
<p>Several components implement the communication interface, using different transports and protocols. </p>


<h3><a class="anchor" id="communication-apploader"></a>Bluetooth Apploader OTA DFU</h3><div class="textblock">By enabling the Apploader communication component, the bootloader communication interface implements Bluetooth Apploader over-the-air (OTA) device firmware upgrade (DFU) protocol. </div>

<h3><a class="anchor" id="communication-bgapi"></a>BGAPI UART DFU</h3><div class="textblock">By enabling the BGAPI communication component, the bootloader communication interface implements the UART DFU protocol using BGAPI commands. This component makes the bootloader compatible with the legacy UART bootloader that was previously released with the Silicon Labs Bluetooth stack. </div>

<h3><a class="anchor" id="communication-ezsp"></a>EZSP-SPI</h3><div class="textblock">By enabling the EZSP-SPI communication component, the bootloader communication interface implements the EZSP protocol over SPI. This component makes the bootloader compatible with the legacy <code>ezsp-spi-bootloader</code> that was previously released with the EmberZnet and SL-Thread wireless stacks. </div>

<h3><a class="anchor" id="communication-xmodem"></a>UART XMODEM</h3><div class="textblock">By enabling the UART XMODEM communication component, the bootloader communication interface implements the XMODEM-CRC protocol over UART. This component makes the bootloader compatible with the legacy <code>serial-uart-bootloader</code> that was previously released with the EmberZnet and SL-Thread wireless stacks. </div><table class="memberdecls">
<tbody><tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="groups"></a>
Modules</h2></td></tr>
<tr class="memitem"><td class="memItemRight" valign="bottom"><a href="group-CommunicationUtils" class="" >Utils</a></td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
</tbody></table><table class="memberdecls">
<tbody><tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga5cbb8a420734e1b2d1a12641e33638ff" class="el" >bootloader_apploader_communication_init</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#gafc721fe6e5f3ed92c85901dae84c44a3" class="el" >bootloader_apploader_communication_start</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#gaf67ddec30e3965125328d6c46149e9ca" class="el" >bootloader_apploader_communication_main</a> (<a href="structImageProperties-t" class="el" >ImageProperties_t</a> *imageProps, <a href="structParserContext-t" class="el" >ParserContext_t</a> *parserContext, <a href="unionDecryptContext-t" class="el" >DecryptContext_t</a> *decryptContext, <a href="unionAuthContext-t" class="el" >AuthContext_t</a> *authContext, const <a href="structBootloaderParserCallbacks-t" class="el" >BootloaderParserCallbacks_t</a> *parseCb)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga42ba8d6931ceaf8efe0a14ea1295d2af" class="el" >bootloader_bgapi_communication_init</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#gad09f821b0107d1a5986d12bade25aabb" class="el" >bootloader_bgapi_communication_start</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#gaf51b61396121545f5d82f611b7fafd8e" class="el" >bootloader_bgapi_communication_main</a> (<a href="structImageProperties-t" class="el" >ImageProperties_t</a> *imageProps, <a href="structParserContext-t" class="el" >ParserContext_t</a> *parserContext, const <a href="structBootloaderParserCallbacks-t" class="el" >BootloaderParserCallbacks_t</a> *parseCb)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga9d1c122bc3538d94d6fd8328cd6c6a2d" class="el" >communication_init</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga6de289010301e4f27488b5521ab86407" class="el" >communication_start</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga246da143bef609f337a85353be406929" class="el" >communication_main</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#gaf9955ceda56ebd3c65d4eb3a57ec295a" class="el" >communication_shutdown</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga1ab457eb24dfe4d2495e64a85b84a2fc" class="el" >bootloader_ezsp_communication_init</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga34bdaadd54f10f1fd0c7fba74fa20234" class="el" >bootloader_ezsp_communication_start</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga577661b84798c4401dcdbbf38203dde9" class="el" >bootloader_ezsp_communication_main</a> (<a href="structImageProperties-t" class="el" >ImageProperties_t</a> *imageProps, <a href="structParserContext-t" class="el" >ParserContext_t</a> *parserContext, const <a href="structBootloaderParserCallbacks-t" class="el" >BootloaderParserCallbacks_t</a> *parseCb)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga1860672e2a3ac7672c9a59dea2ae35ec" class="el" >bootloader_ezsp_communication_shutdown</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#gaf3616800289f9959464ed62c9840a998" class="el" >bootloader_xmodem_communication_init</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga95c2898d64c258584b33a4eeb1b401ff" class="el" >bootloader_xmodem_communication_start</a> (void)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
<tr class="memitem"><td class="memItemLeft" align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a href="group-Communication#ga6fb45c787eadc23d1f35c7c172c7ef68" class="el" >bootloader_xmodem_communication_main</a> (<a href="structImageProperties-t" class="el" >ImageProperties_t</a> *imageProps, const <a href="structBootloaderParserCallbacks-t" class="el" >BootloaderParserCallbacks_t</a> *parseCb)</td></tr>
<tr class="separator"><td class="memSeparator" colspan="2">&nbsp;</td></tr>
</tbody></table>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga5cbb8a420734e1b2d1a12641e33638ff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">void bootloader_apploader_communication_init </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize hardware for the BLE Apploader OTA DFU Bootloader communication. </p>

</div>
</div>
<a class="anchor" id="gafc721fe6e5f3ed92c85901dae84c44a3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t bootloader_apploader_communication_start </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize communication between the BLE Apploader OTA DFU bootloader and external host.</p>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf67ddec30e3965125328d6c46149e9ca"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t bootloader_apploader_communication_main </td>
          <td>(</td>
          <td class="paramtype"><a href="structImageProperties-t" class="el" >ImageProperties_t</a> *&nbsp;</td>
          <td class="paramname"><code>imageProps, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="structParserContext-t" class="el" >ParserContext_t</a> *&nbsp;</td>
          <td class="paramname"><code>parserContext, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="unionDecryptContext-t" class="el" >DecryptContext_t</a> *&nbsp;</td>
          <td class="paramname"><code>decryptContext, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="unionAuthContext-t" class="el" >AuthContext_t</a> *&nbsp;</td>
          <td class="paramname"><code>authContext, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a href="structBootloaderParserCallbacks-t" class="el" >BootloaderParserCallbacks_t</a> *&nbsp;</td>
          <td class="paramname"><code>parseCb&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Communication main for the BLE Apploader OTA DFU bootloader.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>imageProps</code></td><td>The image file processed </td></tr>
    <tr><td class="paramname"><code>parserContext</code></td><td>Image parser context </td></tr>
    <tr><td class="paramname"><code>decryptContext</code></td><td>Image decryption context </td></tr>
    <tr><td class="paramname"><code>authContext</code></td><td>Image authentication context </td></tr>
    <tr><td class="paramname"><code>parseCb</code></td><td>Bootloader parser callbacks</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga42ba8d6931ceaf8efe0a14ea1295d2af"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">void bootloader_bgapi_communication_init </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize hardware for the BGAPI UART DFU Bootloader communication. </p>

</div>
</div>
<a class="anchor" id="gad09f821b0107d1a5986d12bade25aabb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t bootloader_bgapi_communication_start </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize communication between the BGAPI UART DFU bootloader and external host.</p>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>

</div>
</div>
<a class="anchor" id="gaf51b61396121545f5d82f611b7fafd8e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t bootloader_bgapi_communication_main </td>
          <td>(</td>
          <td class="paramtype"><a href="structImageProperties-t" class="el" >ImageProperties_t</a> *&nbsp;</td>
          <td class="paramname"><code>imageProps, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="structParserContext-t" class="el" >ParserContext_t</a> *&nbsp;</td>
          <td class="paramname"><code>parserContext, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a href="structBootloaderParserCallbacks-t" class="el" >BootloaderParserCallbacks_t</a> *&nbsp;</td>
          <td class="paramname"><code>parseCb&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Communication main for the BGAPI UART DFU bootloader.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>imageProps</code></td><td>The image file processed </td></tr>
    <tr><td class="paramname"><code>parserContext</code></td><td>Image parser context </td></tr>
    <tr><td class="paramname"><code>parseCb</code></td><td>Bootloader parser callbacks</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9d1c122bc3538d94d6fd8328cd6c6a2d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">void communication_init </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize hardware for the communication component. </p>

</div>
</div>
<a class="anchor" id="ga6de289010301e4f27488b5521ab86407"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t communication_start </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize communication between the bootloader and external host. For example, indicate that all is well to the external host.</p>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tbody><tr><td class="paramname"><code>BOOTLOADER_OK</code></td><td>on success </td></tr>
    <tr><td class="paramname"><code>BOOTLOADER_ERROR_COMMUNICATION_START</code></td><td>on failure </td></tr>
  </tbody></table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga246da143bef609f337a85353be406929"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t communication_main </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Not supposed to return until either the host signals the end of the current session or a new image has been flashed and verified.</p>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tbody><tr><td class="paramname"><code>BOOTLOADER_OK</code></td><td>when a new image was flashed </td></tr>
    <tr><td class="paramname"><code>BOOTLOADER_ERROR_COMMUNICATION_ERROR</code></td><td>on communication error </td></tr>
    <tr><td class="paramname"><code>BOOTLOADER_ERROR_COMMUNICATION_DONE</code></td><td>when no image was received </td></tr>
    <tr><td class="paramname"><code>BOOTLOADER_ERROR_COMMUNICATION_IMAGE_ERROR</code></td><td>when received image is invalid </td></tr>
  </tbody></table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf9955ceda56ebd3c65d4eb3a57ec295a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">void communication_shutdown </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Stop communication between the bootloader and external host. </p>

</div>
</div>
<a class="anchor" id="ga1ab457eb24dfe4d2495e64a85b84a2fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">void bootloader_ezsp_communication_init </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize hardware for the EZSP SPI Bootloader communication. </p>

</div>
</div>
<a class="anchor" id="ga34bdaadd54f10f1fd0c7fba74fa20234"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t bootloader_ezsp_communication_start </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize communication between the EZSP SPI bootloader and external host.</p>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga577661b84798c4401dcdbbf38203dde9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t bootloader_ezsp_communication_main </td>
          <td>(</td>
          <td class="paramtype"><a href="structImageProperties-t" class="el" >ImageProperties_t</a> *&nbsp;</td>
          <td class="paramname"><code>imageProps, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a href="structParserContext-t" class="el" >ParserContext_t</a> *&nbsp;</td>
          <td class="paramname"><code>parserContext, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a href="structBootloaderParserCallbacks-t" class="el" >BootloaderParserCallbacks_t</a> *&nbsp;</td>
          <td class="paramname"><code>parseCb&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Communication main for the EZSP SPI bootloader.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>imageProps</code></td><td>The image file processed </td></tr>
    <tr><td class="paramname"><code>parserContext</code></td><td>Image parser context </td></tr>
    <tr><td class="paramname"><code>parseCb</code></td><td>Bootloader parser callbacks</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1860672e2a3ac7672c9a59dea2ae35ec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">void bootloader_ezsp_communication_shutdown </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Stop communication between the bootloader and external host. </p>

</div>
</div>
<a class="anchor" id="gaf3616800289f9959464ed62c9840a998"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">void bootloader_xmodem_communication_init </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize hardware for the UART XMODEM Bootloader communication. </p>

</div>
</div>
<a class="anchor" id="ga95c2898d64c258584b33a4eeb1b401ff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t bootloader_xmodem_communication_start </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"><code></code></td><td>)</td>
          <td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Initialize communication between the UART XMODEM bootloader and external host.</p>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>

</div>
</div>
<a class="anchor" id="ga6fb45c787eadc23d1f35c7c172c7ef68"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tbody><tr>
          <td class="memname">int32_t bootloader_xmodem_communication_main </td>
          <td>(</td>
          <td class="paramtype"><a href="structImageProperties-t" class="el" >ImageProperties_t</a> *&nbsp;</td>
          <td class="paramname"><code>imageProps, </code></td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a href="structBootloaderParserCallbacks-t" class="el" >BootloaderParserCallbacks_t</a> *&nbsp;</td>
          <td class="paramname"><code>parseCb&nbsp;</code></td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </tbody></table>
</div><div class="memdoc">
<p>Communication main for the UART XMODEM bootloader.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tbody><tr><td class="paramname"><code>imageProps</code></td><td>The image file processed </td></tr>
    <tr><td class="paramname"><code>parseCb</code></td><td>Bootloader parser callbacks</td></tr>
  </tbody></table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error code indicating success or failure. </dd></dl>

</div>
</div>
</div>
      </article>
    </main>
    <script type="text/javascript" src="https://docs.silabs.com/assets/script.js"></script>
    <script type='text/javascript'>
      var tldr = '/mcu-bootloader/2.1/';
      var _map = '';
    </script>
        <script type="text/javascript">
       try {
        _satellite.pageBottom();
       } catch(err) {
        console.log("Adobe DTM (Analytics) _satellite has not been loaded. Is there any chance you're using an AdBlocker?");
       }
    </script>
  </body>
</html>
